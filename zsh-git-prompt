#!/usr/bin/env python3
import os
import sys
import pygit2

from functools import reduce

# taking from
# https://github.com/libgit2/libgit2/blob/master/include/git2/status.h as
# pygit2 has some missing constants

GIT_STATUS_INDEX_NEW = 1 << 0
GIT_STATUS_INDEX_MODIFIED = 1 << 1
GIT_STATUS_INDEX_DELETED = 1 << 2
GIT_STATUS_INDEX_RENAMED = 1 << 3
GIT_STATUS_INDEX_TYPECHANGE = 1 << 4

GIT_STATUS_WT_NEW = 1 << 7
GIT_STATUS_WT_MODIFIED = 1 << 8
GIT_STATUS_WT_DELETED = 1 << 9
GIT_STATUS_WT_TYPECHANGE = 1 << 10
GIT_STATUS_WT_RENAMED = 1 << 11
GIT_STATUS_WT_UNREADABLE = 1 << 12

GIT_STATUS_IGNORED = 1 << 14
GIT_STATUS_CONFLICTED = 1 << 15


def colorize(color):
    return lambda first_str, second_str = '': (
        '%{{$fg[black]$bg[{color}]%}}{first_str}%{{${{reset_color}}%}}'
        '%{{$fg[black]$bg[white]%}}{second_str}%{{${{reset_color}}%}}'
    ).format(**{
        'color': str(color),
        'first_str': str(first_str),
        'second_str': str(second_str)})


def format_default(value):
    return ' {} '.format(str(value))


colorize_info = colorize('blue')
colorize_warn = colorize('red')
order = ['head', 'staged', 'unstaged', 'conflicted'][::-1]
errors = {
    'not_git_repo': '%{{$fg[black]$bg[white]%}} Ã¸ git %{{${{reset_color}}%}}',
}
formats = {
    'staged': lambda count:
        colorize_info(
            ' + ', format_default(count)
        ),
    'unstaged': lambda count:
        colorize_warn(
            ' - ', format_default(count)
        ),
    'conflicted': lambda count:
        colorize_warn(
            ' !!! ', format_default(count)
        ),
    'upstream': lambda ahead_behind:
        colorize('white')('{}{}{}{}{}'.format(
            ' ' if ahead_behind[0] or ahead_behind[1] else '',
            '+{}'.format(ahead_behind[0]) if ahead_behind[0] else '',
            '/' if ahead_behind[0] and ahead_behind[1] else '',
            '-{}'.format(ahead_behind[1]) if ahead_behind[1] else '',
            ' ' if ahead_behind[0] or ahead_behind[1] else ''
        )),
    'head': lambda repo, head, ahead_behind:
        ' {}{} '.format(
            colorize('green' if not repo.head_is_detached else 'red')(
                ' {} '.format(head)
            ),
            formats['upstream'](ahead_behind))
}

try:
    worktree = pygit2.discover_repository(os.getcwd())
except Error:
    print('err')
    sys.exit()

repo = pygit2.Repository(worktree)
status = repo.status()
items = [status[filename] for filename in status]
initial = {'staged': 0, 'unstaged': 0, 'conflicted': 0}


def reduce_flags(xs, x):
    xs['staged'] += 1 if x & GIT_STATUS_INDEX_NEW else 0
    xs['staged'] += 1 if x & GIT_STATUS_INDEX_MODIFIED else 0
    xs['staged'] += 1 if x & GIT_STATUS_INDEX_DELETED else 0
    xs['staged'] += 1 if x & GIT_STATUS_INDEX_RENAMED else 0
    xs['staged'] += 1 if x & GIT_STATUS_INDEX_TYPECHANGE else 0
    xs['unstaged'] += 1 if x & GIT_STATUS_WT_NEW else 0
    xs['unstaged'] += 1 if x & GIT_STATUS_WT_MODIFIED else 0
    xs['unstaged'] += 1 if x & GIT_STATUS_WT_DELETED else 0
    xs['unstaged'] += 1 if x & GIT_STATUS_WT_TYPECHANGE else 0
    xs['unstaged'] += 1 if x & GIT_STATUS_WT_RENAMED else 0
    xs['unstaged'] += 1 if x & GIT_STATUS_WT_UNREADABLE else 0
    xs['conflicted'] += 1 if x & GIT_STATUS_CONFLICTED else 0
    # GIT_STATUS_IGNORED
    return xs


file_diffs = reduce(reduce_flags, items, initial)
head = (repo.head.shorthand
        if not repo.head_is_detached
        else repo.head.target.hex[:7])
upstream = repo.branches.get(
    repo.head.shorthand).upstream if not repo.head_is_detached else Nil
ahead_behind = repo.ahead_behind(
    repo.head.target, upstream.target) if upstream else (0, 0)
branch_name = formats['head'](repo, head, ahead_behind)

status = '{} {}'.format(
    branch_name,
    ' '.join([formats[section](file_diffs[section])
              for section in order
              if section in file_diffs
              and file_diffs[section]]))

print(status)
